training[,1]
training[,2]
training[,3]
training[,4]
modelFit <- train(Class ~ training[,4:119],method="rpart",data=training)
?subset()
modelFit <- train(Class ~ .,method="rpart",data=training)
print(modelFit$finalModel)
plot(modelFit$finalModel,uniform=TRUE)
plot(modelFit$finalModel,uniform=TRUE)
text(modelFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
library(rattle)
fancyRpartPlot(modelFit$finalModel)
install.packages("rattle")
print(modelFit$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
training <- segmentationOriginal[segmentationOrginial$Case == "Train", ]
segmentationOriginal[segmentationOrginial$Case == "Train", ]
summary(segmentationOriginal)
summary(segmentationOriginal)
segmentationOriginal[1,]
segmentationOriginal[segmentationOriginal$Case == "Train",]
segmentationOriginal[segmentationOriginal$Case == "Train",]
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
modelFit <- train(Class ~ .,method="rpart",data=training)
print(modelFit$finalModel)
plot(modelFit$finalModel,uniform=TRUE)
text(modelFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
library(rattle)
fancyRpartPlot(modelFit$finalModel)
fancyRpartPlot(modelFit$finalModel)
plot(modelFit$finalModel,uniform=TRUE)
text(modelFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
plot(modelFit$finalModel,uniform=TRUE)
text(modelFit$finalModel,use.n=TRUE,all=TRUE,cex=.6)
print(modelFit$finalModel)
library(caret)
library(pgmm)
data(olive)
install.packages("pgmm")
library(caret)
library(pgmm)
data(olive)
View(olive)
olive = olive[,-1]
summary(olive$Area)
table(olive$Area)
modelFit <- train(Area ~ .,method="rpart",data=olive)
print(modelFit$finalModel)
plot(modelFit$finalModel,uniform=TRUE)
text(modelFit$finalModel,use.n=TRUE,all=TRUE,cex=.6)
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
newdata1 = as.data.frame(t(colMeans(olive)))
predict(modelFit,newdata=newdata1)
print(modelFit$finalModel)
View(olive)
olive$Area <- as.factor(olive$Area)
modelFit <- train(Area ~ .,method="rpart",data=olive)
print(modelFit$finalModel)
predict(modelFit,newdata=newdata1)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
?train()
trainSA1 <- trainSA[-sbp,]
trainSA1 <- trainSA[-sbp,]
trainSA1 <- trainSA[c(1,3,5),]
trainSA1 <- trainSA[,c(1,3,5)]
trainSA1 <- trainSA[,c(2,3,6:10)]
trainSA1 <- trainSA[,c(2,3,6:10)]
trainSA1 <- trainSA[,c(2,3,6:10)]
testSA1 <- testSA[,c(2,3,6:10)]
modfit <- train(chd ~ . ,method="glm",family ="binomial",data=trainSA1)
modfit <- train(as.factor(chd) ~ . ,method="glm",family ="binomial",data=trainSA1)
trainSA1$chd <- as.factor(trainSA1$chd)
set.seed(13234)
trainSA1 <- trainSA[,c(2,3,6:10)]
trainSA1$chd <- as.factor(trainSA1$chd)
testSA1 <- testSA[,c(2,3,6:10)]
testSA1$chd <- as.factor(testSA1$chd)
modfit <- train(chd ~ . ,method="glm",family ="binomial",data=trainSA1)
xout <- predict(modfit,testSA1)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(test$chd,xout)
missClass(testSA1$chd,xout)
missClass(as.numeric(testSA1$chd),as.numeric(xout))
xout1 <- predict(modfit,trainSA1)
missClass(as.numeric(trainSA1$chd),as.numeric(xout))
missClass(as.numeric(testSA1$chd),as.numeric(xout))
missClass(as.numeric(trainSA1$chd),as.numeric(xout1))
xout <- predict(modfit,testSA1,type="response")
?predict()
xout <- predict(modfit,testSA1,scale="response")
gmodfit <- glm(chd ~.,family=binomial,data=trainSA1)
gmodfit <- glm(chd ~.,family=binomial,data=trainSA1,scale=response)
gmodfit <- glm(chd ~.,family=binomial,data=trainSA1,scale="response")
gmodfit <- glm(chd ~.,family=binomial,scale=response,data=trainSA1)
?glm()
gmodfit <- glm(chd ~.,family=binomial,data=trainSA1)
modfit <- train(chd ~ . ,method="glm",family ="binomial",data=trainSA1)
xout <- predict(modfit,testSA1,scale="response")
xout <- predict(modfit,testSA1,scale=response)
xout <- predict(modfit,testSA1,type="response")
xout <- predict(modfit,testSA1,type="prob")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
xout <- predict(modfit,testSA1,type="prob")
modfit <- train(chd ~ . ,method="glm",family ="binomial",data=trainSA1)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
trainSA1 <- trainSA[,c(2,3,6:10)]
trainSA1$chd <- as.factor(trainSA1$chd)
testSA1 <- testSA[,c(2,3,6:10)]
testSA1$chd <- as.factor(testSA1$chd)
modfit <- train(chd ~ . ,method="glm",family ="binomial",data=trainSA1)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
xout <- predict(modfit,testSA1,type="prob")
xout <- predict(modfit,testSA1[,-7],type="prob")
xout <- predict(modfit,testSA1[,-7])
xout <- predict(modfit,testSA1[,-7])
xout <- predict(modfit,testSA1[,-7],type="response")
xout <- predict(modfit,testSA1[,-7],type="prob")
xout <- predict(modfit,testSA1[,-7],scale="response")
xout <- predict(modfit,testSA1[,-7],scale=response)
xout <- predict(modfit,testSA1[,-7],scale="prob")
xout <- predict(gmodfit,testSA1,type=c("response")
xout <- predict(modfit,testSA1,type=c("response"))
xout <- predict(modfit,testSA1,type=c("prob"))
?predict()
modfit <- train(chd ~ . ,method="glm",family ="binomial",data=trainSA1)
xout <- predict(modfit,testSA1)
testSA1 <- testSA[,c(2,3,6:10)]
modfit <- train(chd ~ . ,method="glm",family ="binomial",data=trainSA1)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
xout <- predict(modfit,testSA1,type="response")
xout <- predict(modfit,testSA1,type="prob")
xout <- predict(modfit,testSA1)
missClass(as.numeric(testSA1$chd),as.numeric(xout))
gmodfit <- glm(chd ~.,family=binomial,data=trainSA1)
xout <- predict(gmodfit,testSA1,scale="response")
missClass(as.numeric(testSA1$chd),as.numeric(xout))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
trainSA1 <- trainSA[,c(2,3,6:10)]
-- trainSA1$chd <- as.factor(trainSA1$chd)
testSA1 <- testSA[,c(2,3,6:10)]
-- testSA1$chd <- as.factor(testSA1$chd)
-- modfit <- train(chd ~ . ,method="glm",family ="binomial",data=trainSA1)
gmodfit <- glm(chd ~.,family=binomial,data=trainSA1)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
xout <- predict(gmodfit,testSA1,scale="response")
missClass(as.numeric(testSA1$chd),as.numeric(xout))
xout1 <- predict(gmodfit,trainSA1,scale="response")
missClass(as.numeric(trainSA1$chd),as.numeric(xout1))
xout <- predict(gmodfit,testSA1,type="response")
missClass(as.numeric(testSA1$chd),as.numeric(xout))
xout1 <- predict(gmodfit,trainSA1,type="response")
missClass(as.numeric(trainSA1$chd),as.numeric(xout1))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
a1 <- vowel.train
b1 <- vowel.test
vowel.train$x.2
modfit <- train(factor(y) ~.,method="rf",data=vowel.train)
set.seed(33833)
modfit <- train(factor(y) ~.,method="rf",data=vowel.train)
?varimp()
varimp(modfit)
?varimp
??varimp
varImp(modfit)
library(AppliedPredictiveModeling)
installed.packages
library("caret", lib.loc="~/R/win-library/3.2")
library("AppliedPredictiveModeling", lib.loc="~/R/win-library/3.2")
library("pgmm", lib.loc="~/R/win-library/3.2")
library("rpart", lib.loc="C:/Program Files/R/R-3.2.0/library")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
modelFit <- train(Class ~ .,method="rpart",data=training)
print(modelFit$finalModel)
View(training)
training1 <- training[,3:119]
modelFit <- train(Class ~ .,method="rpart",data=training1)
print(modelFit$finalModel)
set.seed(125)
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
training1 <- training[,3:119]
modelFit <- train(Class ~ .,method="rpart",data=training1)
print(modelFit$finalModel)
## use character columns of names to get sensible sort order
authors <- data.frame(
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
(m1 <- merge(authors, books, by.x = "surname", by.y = "name"))
(m2 <- merge(books, authors, by.x = "name", by.y = "surname"))
?percent()
??percent()
library(scales)
libarry(scales)
dTable()
?dTable()
runApp()
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
?as.currency()
?format()
format(1000,nsmall=2)
printCurrency <- function(value, currency.sym="$", digits=2, sep=",", decimal=".") {
paste(
currency.sym,
formatC(value, format = "f", big.mark = sep, digits=digits, decimal.mark=decimal),
sep=""
)
}
printCurrency(123123.334)
formatC(1000,format="f")
printCurrency <- function(value, currency.sym="$", digits=2, sep=",", decimal=".") {
paste(
currency.sym,
formatC(value, format = "f", big.mark = sep, digits=digits, decimal.mark=decimal),
sep=""
)
}
printCurrency(123123.334)
?ln()
cf <- rep(0,15)
year <- c(1:15)
pv <- rep(0,15)
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
exp <- -1.099
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
?log()
log(1)
log(1) * exp
log(2) * exp
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
??max
max(-23,0)
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
12000/1000/40/100
12000/1000/(40/100)
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
runApp(displayMode = 'showcase')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
rm(exp)
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
radioButtons()
?radioButtons()
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
?barchart()
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
?barchart()
?barplot()
shiny::runApp('Data Science/Data Products/LTV')
?qplot()
library(ggplot2)
library(ggplot)
library(ggplot2)
library("ggplot2", lib.loc="~/R/win-library/3.2")
?qplot()
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
rm(cashflows)
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
shiny::runApp('Data Science/Data Products/LTV')
install.packages('devtools')
library(devtools)
install.packages("rtools")
library(rtools)
install.packages("Rtools")
library(devtools)
install_github('slidify','ramnathv')
install_github('slidify','ramnathv/slidify')
install_github('slidify', 'ramnathv')
options(install.packages.check.source = "no")
install_github('slidify', 'ramnathv')
devtools::install_github('slidify', 'ramnathv')
install.packages('stringi')
install_github('slidify', 'ramnathv')
library(slidify)
setwd("C:/Users/jlee/Documents/Data Science/Data Products/LTV")
list.files()
author("lifetimevalue")
shiny::runApp('~/Data Science/Data Products/LTV')
browseULR(index.RMD)
browseURL(index.RMD)
slidify('index.Rmd')
library(knitr)
browseURL(index.Rmd)
browseURL(index.html)
list.files()
browseURL('index.html')
slidify('index.Rmd')
install_github('slidifyLibraries','ramnathv')
slidify('index.Rmd')
browseURL('index.html')
library(knitr)
browseURL('Index.html')
browseURL('index.html')
slidify('index.Rmd')
browseURL('Index.HTML')
shiny::runApp('~/Data Science/Data Products/LTV')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
type <- "Marketing"  #Type of Signup Cohort (i.e. Organic vs Marketing)
members <-  300000   #Number of members acquired in the quarter
netrev <- 442000     #Net Revenue generated by cohort in the quarter acquired
pct <- 43            #% of Net Revenues in the quarter acquired versus the first year
discount <- 16       #Discount rate % used to calculate the present value of future cashflows
year <- c(1:15)
typeval <- function(type) {
switch(type,
Marketing = -1.099,
Organic = -3.509)
}
ltvpv <- function(rev_member,disc,exp1) {
pv <- rep(0,15)
for (i in 1:15)   {
pv[i] <- max(log(i) * exp1 + rev_member,0) / (1+(disc/100))^i
}
sum(pv)
}
ltv <- function(rev_member,exp1) {
cf <- rep(0,15)
for (i in 1:15)   {
cf[i] <- max(log(i) * exp1 + rev_member,0)
}
sum(cf)
}
cashflows <- function(rev_member,exp1) {
cf <- rep(0,15)
for (i in 1:15)   {
cf[i] <- max(log(i) * exp1 + rev_member,0)
}
cf
}
ltvpv_pred <- ltvpv(netrev/members/(pct/100),discount,typeval(type))
ltv_pred <- ltv(netrev/members/(pct/100),typeval(type))
q <- barplot(height=cashflows(netrev/members/pct/100,typeval(type)),names.arg=year,main="Projected Future Cash Flows",xlab="Years",ylab="Net Revenue per Signup")
q
typeval(type)
shiny::runApp('~/Data Science/Data Products/LTV')
cashflows(netrev/members/pct/100,typeval(type))
netrev/members/pct/100
q <- barplot(height=cashflows(netrev/members/(pct/100),typeval(type)),names.arg=year,main="Projected Future Cash Flows",xlab="Years",ylab="Net Revenue per Signup")
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
publish_github(jclee2007,Data Products)
publish_github(jclee2007,Data-Products)
publish_github('jclee2007','Data-Products')
publish_github(Data-Products,jclee2007)
publish_github('Data-Products','jclee2007')
